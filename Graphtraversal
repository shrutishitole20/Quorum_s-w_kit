import java.util.*;
public class Graphtraversal
{
    int V;
    List<List<Integer>> adj;
    Graphtraversal(int v)
    {
        V = v;
        adj = new ArrayList<>();
        for(int i = 0; i<v; i++)
          adj.add(new ArrayList<>());
          
    }
    void addEdge(int u, int v)
    {
        adj.get(u).add(v);
        adj.get(v).add(u);
    }
    
    void dfs(int start,boolean[] visited)
    {
        visited[start] = true;
        System.out.print(start + " ");
        for(int neighbor : adj.get(start))
          if(!visited[neighbor])
            dfs(neighbor, visited);
    }
    
    void bfs(int start)
    {
        boolean[] visited = new boolean[V];
        Queue<Integer> q = new LinkedList<>();
        q.add(start);
        visited[start] = true;
        
        while (!q.isEmpty())
        {
            int node = q.poll();
            System.out.println(node + " ");
            for(int neighbor : adj.get(node))
            {
                if(!visited[neighbor])
                {
                    q.add(neighbor);
                    visited[neighbor] = true;
                }
            }
            
        }
    }
    public static void main(String args[])
    {
      Graphtraversal g = new Graphtraversal(5);
      g.addEdge(0,1);
      g.addEdge(0,2);
      g.addEdge(1,3);
      g.addEdge(1,4);
      
      System.out.print("DFS:");
      g.dfs(0, new boolean[5]);
      System.out.print("\nBFS:");
      g.bfs(0);
    }
}

/*
Output:

DFS:0 1 3 4 2 
BFS:0 
1 
2 
3 
4 
*/
