/*

Given lots of intervals with start and end, try to merge them into fewer intervals."
This is the classic merge intervals problem.

Steps:

Sort intervals by start time.

Iterate through sorted list, and merge overlapping intervals by updating end time.

Output the merged list.
Time: O(n log n) due to sorting.

*/


import java.util.*;

public class MergeIntervals {
    public static int[][] merge(int[][] intervals) {
        if (intervals.length <= 1) return intervals;

        // Step 1: Sort intervals by start time
        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        List<int[]> result = new ArrayList<>();
        int[] current = intervals[0];
        result.add(current);

        // Step 2: Merge intervals
        for (int[] interval : intervals) {
            if (interval[0] <= current[1]) {
                // Overlap → update end
                current[1] = Math.max(current[1], interval[1]);
            } else {
                // No overlap → new interval
                current = interval;
                result.add(current);
            }
        }

        return result.toArray(new int[result.size()][]);
    }

    public static void main(String[] args) {
        int[][] intervals = {{1,3},{2,6},{8,10},{15,18}};
        int[][] merged = merge(intervals);

        for (int[] interval : merged) {
            System.out.println(Arrays.toString(interval));
        }
    }
}
